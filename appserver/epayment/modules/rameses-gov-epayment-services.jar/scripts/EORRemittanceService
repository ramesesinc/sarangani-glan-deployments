import com.rameses.annotations.*;
import com.rameses.util.*;
import com.rameses.common.*;
import treasury.utils.*;

class EORRemittanceService {

    @DataContext("eor_remittance")
    def remEm;

    @DataContext("eor_remittance_fund")
    def remFundEm;

    @DataContext("eor")
    def eorEm;


    @DataContext("eor_item")
    def eorItemEm;

    @DataContext("fund")
    def fundEm;

    @Service("DateService")
    def dateSvc;

    @Service('EORNumberService')
    def numSvc;

    @Env
    def env;

    @ProxyMethod
    public def create( def pp ) {
        if ( !pp.items ) 
            throw new Exception("Please select at least one item to remit");
        if( pp.amount <= 0 )
            throw new Exception("Amount must be greater than 0");

        def items = pp.items;
        def arr = items.collect{ it.objid };

        def m = [state:"DRAFT"];
        m.controlno = 'TMP-REM-'+env.USERID;
        m.controldate = pp.controldate;
        m.partnerid = pp.partnerid;
        m.amount = pp.amount;
        m.dtcreated = dateSvc.getServerDate();
        m.createdby = [objid:env.USERID, name: env.FULLNAME, title: env.JOBTITLE ];
        m = remEm.create(m);

        eorEm.where( '''objid IN (${ids})''').vars("ids", "'" + arr.join("','") + "'").update([remittanceid: m.objid ]);

        def fundList = eorItemEm.select("item.fund.objid,amount:{SUM(amount)}").where( "parent.remittanceid = :remittanceid", [remittanceid:m.objid] ).groupBy("item.fund.objid").list();
        fundList.each {
            def v = [remittanceid:m.objid]    
            v.fund = fundEm.find( [objid: it.item.fund.objid ] ).first(); 
            v.amount = it.amount;
            remFundEm.create( v );
        }

        return m;
    }

    @ProxyMethod
    public def post( o ) { 
        def findby = [ objid: o.objid ];
        def reminfo = remEm.find( findby ).select('objid,state').first(); 
        if ( !reminfo?.objid ) 
            throw new Exception('EOR Remittance record not found'); 
        if ( reminfo?.state.toString().toUpperCase() != 'DRAFT' ) 
            throw new Exception('EOR Remittance record must be in DRAFT state'); 

        def u = [ state: 'POSTED' ]; 
        u.postedby = [objid: env.USERID, name: env.FULLNAME];
        u.dtposted = dateSvc.getServerDate();
        u.controlno = numSvc.getNextRemittanceNumber( [:] ); 
        remEm.find( findby ).update( u ); 
        u.objid = o.objid; 
        return u; 
    } 

    @ProxyMethod 
    public void updateValidation( params ) {
        def u = [ validation: params.validation ]; 
        remFundEm.find([ objid: params.objid ]).update( u );
    }    

    @ProxyMethod 
    public void updateBankAccount( params ) {
        def u = [ bankaccount: params.bankaccount ]; 
        remFundEm.find([ objid: params.objid ]).update( u );
    }
}
